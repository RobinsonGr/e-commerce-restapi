/// <reference types="node" />
import { Nullable } from "../types.js";
export declare namespace Protocol {
    const VERSION_MAJOR = 3;
    const VERSION_MINOR = 0;
    enum BackendMessageCode {
        Authentication = 82,
        BackendKeyData = 75,
        BindComplete = 50,
        CloseComplete = 51,
        CommandComplete = 67,
        CopyData = 100,
        CopyDone = 99,
        CopyInResponse = 103,
        CopyOutResponse = 72,
        CopyBothResponse = 87,
        DataRow = 68,
        EmptyQueryResponse = 73,
        ErrorResponse = 69,
        FunctionCallResponse = 86,
        NegotiateProtocolVersion = 118,
        NoData = 110,
        NoticeResponse = 78,
        NotificationResponse = 65,
        ParameterDescription = 116,
        ParameterStatus = 83,
        ParseComplete = 49,
        PortalSuspended = 115,
        ReadyForQuery = 90,
        RowDescription = 84
    }
    enum FrontendMessageCode {
        Bind = 66,
        Close = 67,
        CopyData = 100,
        CopyDone = 99,
        CopyFail = 102,
        Describe = 68,
        Execute = 69,
        Flush = 72,
        FunctionCall = 70,
        Parse = 80,
        PasswordMessage = 112,
        Query = 81,
        Sync = 83,
        Terminate = 88
    }
    enum AuthenticationMessageKind {
        KerberosV5 = "KerberosV5",
        CleartextPassword = "CleartextPassword",
        MD5Password = "MD5Password",
        SCMCredential = "SCMCredential",
        GSS = "GSS",
        SSPI = "SSPI",
        GSSContinue = "GSSContinue",
        SASL = "SASL",
        SASLContinue = "SASLContinue",
        SASLFinal = "SASLFinal"
    }
    enum DataFormat {
        text = 0,
        binary = 1
    }
    interface AuthenticationRequiredMessage {
        kind: AuthenticationMessageKind;
    }
    interface AuthenticationKerberosV5Message extends AuthenticationRequiredMessage {
        kind: AuthenticationMessageKind.KerberosV5;
    }
    interface AuthenticationCleartextPasswordMessage extends AuthenticationRequiredMessage {
        kind: AuthenticationMessageKind.CleartextPassword;
    }
    interface AuthenticationMD5PasswordMessage extends AuthenticationRequiredMessage {
        kind: AuthenticationMessageKind.MD5Password;
        salt: Buffer;
    }
    interface AuthenticationSCMCredentialMessage extends AuthenticationRequiredMessage {
        kind: AuthenticationMessageKind.SCMCredential;
    }
    interface AuthenticationGSSMessage extends AuthenticationRequiredMessage {
        kind: AuthenticationMessageKind.GSS;
    }
    interface AuthenticationSSPIMessage extends AuthenticationRequiredMessage {
        kind: AuthenticationMessageKind.SSPI;
    }
    interface AuthenticationGSSContinueMessage extends AuthenticationRequiredMessage {
        kind: AuthenticationMessageKind.GSSContinue;
        data: Buffer;
    }
    interface AuthenticationSASLMessage extends AuthenticationRequiredMessage {
        kind: AuthenticationMessageKind.SASL;
        mechanisms: string[];
    }
    interface AuthenticationSASLContinueMessage extends AuthenticationRequiredMessage {
        kind: AuthenticationMessageKind.SASLContinue;
        data: string;
    }
    interface AuthenticationSASLFinalMessage extends AuthenticationRequiredMessage {
        kind: AuthenticationMessageKind.SASLFinal;
        data: string;
    }
    interface BackendKeyDataMessage {
        processID: number;
        secretKey: number;
    }
    interface CommandCompleteMessage {
        command: string;
        oid?: number;
        rowCount?: number;
    }
    interface CopyDataMessage {
        data: Buffer;
    }
    interface CopyResponseMessage {
        overallFormat: DataFormat;
        columnCount: number;
        columnFormats?: DataFormat[];
    }
    interface DataRow {
    }
    interface DataRowMessage {
        columnCount: number;
        columns: Nullable<Buffer>[];
    }
    interface ErrorResponseMessage {
        severity?: string;
        code?: string;
        message?: string;
        detail?: string;
        hint?: string;
        position?: string;
        internalPosition?: string;
        internalQuery?: string;
        where?: string;
        schema?: string;
        table?: string;
        column?: string;
        dataType?: string;
        constraint?: string;
        file?: string;
        line?: string;
        routine?: string;
    }
    interface NotificationResponseMessage {
        processId: number;
        channel: string;
        payload: string;
    }
    interface FunctionCallResponseMessage {
        result: Buffer;
    }
    interface NegotiateProtocolVersionMessage {
        supportedVersionMinor: number;
        numberOfNotSupportedVersions: number;
        option: string;
    }
    interface ParameterDescriptionMessage {
        parameterCount: number;
        parameterIds: number[];
    }
    interface ParameterStatusMessage {
        name: string;
        value: string;
    }
    interface ReadyForQueryMessage {
        status: string;
    }
    interface RowDescription {
        fieldName: string;
        tableId: number;
        columnId: number;
        dataTypeId: number;
        fixedSize?: number;
        modifier?: number;
        format: DataFormat;
    }
    interface RowDescriptionMessage {
        fields: RowDescription[];
    }
}
